call plug#begin('~/.vim/plugged')

Plug 'chriskempson/base16-vim'
Plug 'davidhalter/jedi-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-syntastic/syntastic'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'majutsushi/tagbar'
Plug 'lvht/tagbar-markdown'
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'xolox/vim-misc'
Plug 'xolox/vim-lua-ftplugin'
Plug 'sheerun/vim-polyglot'
Plug 'justmao945/vim-clang'
Plug 'Shougo/deoplete.nvim'
Plug 'zchee/deoplete-clang'
Plug 'zchee/deoplete-jedi'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'honza/vim-snippets'
Plug 'Townk/vim-autoclose'
Plug 'tpope/vim-surround'
Plug 'reedes/vim-pencil'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-fugitive'
Plug 'ervandew/supertab'
Plug 'SirVer/ultisnips'
Plug 'Shougo/vimproc.vim', {'do' : 'make'}
Plug 'Shougo/vimshell.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'edkolev/tmuxline.vim'
"Plug 'starcraftman/vim-eclim'
"Plug 'Valloric/YouCompleteMe'
"Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}

call plug#end()

set nocompatible
set encoding=utf-8

set t_Co=256
set number
syntax on
set mouse=a
set mousehide
if !has('nvim')
    set ttymouse=xterm2
    execute "set <M-1>=\e1"
    execute "set <M-3>=\e3"
endif
set cursorline
set spell
set linespace=0

" set tab options
set tabstop=8 softtabstop=0 expandtab shiftwidth=4 smarttab
set autoindent
set smartindent
set cindent

" copy to clipboard
set clipboard+=unnamedplus

" sync current dir with buffer
autocmd BufEnter * lcd %:p:h
"set termguicolors

" jump to the last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Base16
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

" Set background to NONE
"highlight Normal ctermbg=NONE

" Shortcuts
nmap <C-a> ggVG
nmap <C-c> "+y
vmap <C-c> "+y
imap <C-c> <ESC>"+y
nmap <C-s> <ESC>:w<CR>
imap <C-s> <ESC>:w<CR>
vmap <Tab> >gv
vmap <S-Tab> <gv
" exit terminal-mode
tnoremap <Esc> <C-\><C-n>
tnoremap <A-h> <C-\><C-N><C-w>h
tnoremap <A-j> <C-\><C-N><C-w>j
tnoremap <A-k> <C-\><C-N><C-w>k
tnoremap <A-l> <C-\><C-N><C-w>l
inoremap <A-h> <C-\><C-N><C-w>h
inoremap <A-j> <C-\><C-N><C-w>j
inoremap <A-k> <C-\><C-N><C-w>k
inoremap <A-l> <C-\><C-N><C-w>l
nnoremap <A-h> <C-w>h
nnoremap <A-j> <C-w>j
nnoremap <A-k> <C-w>k
nnoremap <A-l> <C-w>l

""""" Plugins configurations """""

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" nvim terminal emu
if has('nvim')
    autocmd TermOpen * setlocal statusline=%{b:term_title}
endif

" airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='base16_oceanicnext'
let g:airline_powerline_fonts = 1
let g:airline_left_sep = ""
let g:airline_left_alt_sep = ""
let g:airline_right_sep = ""
let g:airline_right_alt_sep = ""

" tmuxline
let g:tmuxline_powerline_separators = 0
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#T',
      \'c'    : '#(whoiam)',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'x'    : '%a',
      \'y'    : '%I:%M %p',
      \'z'    : '#H'}

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_auto_refresh_includes = 1
let g:syntastic_cpp_include_dirs = [ 'includes', 'headers' ]
let g:syntastic_cpp_compiler = 'clang++'
let g:syntastic_c_check_header = 1
let g:syntastic_c_auto_refresh_includes = 1
let g:syntastic_c_include_dirs = [ 'includes', 'headers' ]
let g:syntastic_c_compiler = 'clang'

" ctrlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux

let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" tagbar
nmap <A-3> :TagbarToggle<CR>

" deoplete
let g:deoplete#enable_at_startup = 1

" autoclose
let g:AutoClosePumvisible = {"ENTER": "<C-Y>", "ESC": "<ESC>"}

" Markdown
augroup markdown
    au!
    au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown
augroup END

" vim-pencil
let g:pencil#wrapModeDefault = 'soft'   " default is 'hard'
augroup pencil
  autocmd!
  autocmd FileType markdown,mkd,mk call pencil#init()
                               \ | call lexical#init()
                               \ | call litecorrect#init()
                               \ | call textobj#quote#init()
                               \ | call textobj#sentence#init()
augroup END

" YCM
let g:ycm_python_binary_path = '/usr/bin/python3'
let g:ycm_global_ycm_extra_conf = '~/.vim/ycm_extra_conf.py'


" SuperTab
let g:SuperTabDefaultCompletionType = "context"

" NERDTree
"let g:NERDTreeMapOpenInTab='\r'
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
" nerdtree when opening a dir
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif
" close vim if nerdtree is the only one open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <A-1> :NERDTreeTabsToggle<CR>

" NERDTreeTabs
"let g:nerdtree_tabs_open_on_gui_startup = 0

" NerdTree git
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ 'Ignored'   : '☒',
    \ "Unknown"   : "?"
    \ }

" NERDCommenter
map <C-_> <leader>c<space>

" Bufferline
"let g:bufferline_echo = 0
"autocmd VimEnter *
  "\ let &statusline='%{bufferline#refresh_status()}'
    "\ .bufferline#get_status_string()
